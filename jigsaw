#!/usr/bin/env php
<?php

use Illuminate\Container\Container;
use Illuminate\Contracts\Events\Dispatcher;
use Illuminate\View\Compilers\BladeCompiler;
use Illuminate\View\Engines\CompilerEngine;
use Illuminate\View\Engines\EngineResolver;
use Illuminate\View\Factory;
use Illuminate\View\FileViewFinder;
use TightenCo\Jigsaw\Console\BuildCommand;
use TightenCo\Jigsaw\Console\InitCommand;
use TightenCo\Jigsaw\Console\ServeCommand;
use TightenCo\Jigsaw\Filesystem;
use TightenCo\Jigsaw\Handlers\BladeHandler;
use TightenCo\Jigsaw\Handlers\DefaultHandler;
use TightenCo\Jigsaw\Handlers\MarkdownHandler;
use TightenCo\Jigsaw\Jigsaw;
use TightenCo\Jigsaw\TemporaryFilesystem;

if (file_exists(__DIR__.'/vendor/autoload.php')) {
    require __DIR__.'/vendor/autoload.php';
} else {
    require __DIR__.'/../../autoload.php';
}

// Config
$cachePath = getcwd() . '/_tmp';
$buildPath = getcwd() . '/build';
$sourcePath = getcwd() . '/source';
$bladePath = getcwd() . '/blade';

$container = new Container;

$container->bind(Factory::class, function ($c) use ($cachePath, $sourcePath, $bladePath) {
    $resolver = new EngineResolver;

    $resolver->register('blade', function () use ($cachePath, $bladePath) {
        $compiler = new BladeCompiler(new Filesystem, $cachePath);

        if (is_dir($bladePath)) {
            $directives = collect((new Filesystem())->allFiles($bladePath));

            $directives->filter(function ($file) {
                return ends_with($file->getFilename(), '.php') && !ends_with($file->getFilename(), '.raw.php');
            })->each(function ($file) use ($compiler) {
                $compiler->directive($file->getBasename('.php'), function ($expression) use ($file) {
                    return "<?php execute_custom_blade_directive('" . $file->getRealPath() . "', get_defined_vars()" .
                    ((trim($expression) != '') ? ", " . $expression : '') .
                    "); ?>";
                });
            });

            $directives->filter(function ($file) {
                return ends_with($file->getFilename(), '.raw.php');
            })->each(function ($file) use ($compiler) {
                $compiler->directive($file->getBasename('.raw.php'), function ($expression) use ($file) {
                    return require $file->getRealPath();
                });
            });
        }

        return new CompilerEngine($compiler, new Filesystem);
    });

    $finder = new FileViewFinder(new Filesystem, [$sourcePath]);
    return new Factory($resolver, $finder, Mockery::mock(Dispatcher::class)->shouldIgnoreMissing());
});

$container->bind(BladeHandler::class, function ($c) {
    return new BladeHandler($c[Factory::class]);
});

$container->bind(MarkdownHandler::class, function ($c) use ($cachePath) {
    $tempFilesystem = new TemporaryFilesystem($cachePath);
    return new MarkdownHandler($tempFilesystem, $c[Factory::class]);
});

Container::setInstance($container);

$jigsaw = new Jigsaw(new Filesystem, $cachePath);

$jigsaw->registerHandler($container[MarkdownHandler::class]);
$jigsaw->registerHandler($container[BladeHandler::class]);
$jigsaw->registerHandler($container[DefaultHandler::class]);

$buildCommand = new BuildCommand($jigsaw, $sourcePath, $buildPath);

$app = new Symfony\Component\Console\Application('Jigsaw', '0.6.4');
$app->add($buildCommand);
$app->add($container[InitCommand::class]);
$app->add($container[ServeCommand::class]);
$app->run();
